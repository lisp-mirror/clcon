Тесты для взаимодействия с лиспом:
==================================

defu Tab - должен появиться defun

defun M-. - переходим к опр-ю defun

print M-. должно появиться три гиперссылки

(dotimes (i 10) (sleep 0.5) (print i)) должно напечататься, посреди этого должен работать completion для defun (пока не работает)


Тесты редактора
===============
Close file с определинем defun и потом опять выбираем defun - работатьь должно
defun M-., и потом опять defun M-. , а потом ..puts $::edt::EditorReusableWindowDict - файл с defun должен быть в списке один раз.
Hide Window и потом опять defun - не должно ломаться.
Крестик - и потом опять defun - то же
Поиск должен работать, f3 должно работать.

Заморозка должна работать. Тесты (полуручные)
 ../test/freezing-test-1.tcl
 ../test/freezing-test-2.tcl
 для тестирования редактора можно в консоли написать:
 ``.. <Путь редактора, написанный в заголовке> Freeze``
 Потом что-то делаем.
 Потом Unfreeze

нажимаем и держим shift-return (indent-new-line) - не должно падать. 
Сontrol-right должно работать в лиспе - переходит на следующую форму, должно вызываться
из меню и с клавиатуры.
При отключении опции oduvan-backend должно переходить на следующее слово. 

Ф-я oi::check-something-ok полезна, если возникают проблемы в марках (марка не в своей строке). Она может быть отключена комментированием. 

Тесты взаимодействия с одуванчиком
==============
(clco:start-oduvanchik) (обычно я это делаю в emacs) - редактор должен появиться 
..set ed [::edt::edit "/s2/clcon/tiny.lisp"]
Переключаемся в одуванчик - после переключения текст должен показаться
В clcon редактируем текст - текст должен меняться в одуванчике 

Тесты ошибок
============
..asdfasdfasdfasdfasdadsf
Появляется браузер ошибок. Гиперссывлка в ней должна нажиматься


Отладчик проверяем
==================
В slime:
(defun test-debugger-1 ()
  (let ((l (length (swank:list-threads))))
   (defun compute-fixnum-power-of-2 (x)
    (with-simple-restart (nil "Give up on computing 2^~D." x)
      (let ((result 1))
        (dotimes (i x result)
          (setq result (* 2 result))
          (unless (fixnump result)
            (error "Power of 2 is too large."))))))
   (eval '(compute-fixnum-power-of-2 100500))
   (print "This should be printed after returning from a debugger")
   (assert (= l (length (swank:list-threads))))
  ))
далее запускаем это же из clcon. выбираем restart "give-up", должно напечататься
"This should be printed after returning from a debugger"
Если закрываем крестиком (abort), то не должно напечататься.

Поиск в дереве
==============
..::srchtblst::TestFnMan1 - должен напечатать found1, found2
..::srchtblst::TestFnMan2 - просто должен правильно работать
В отладчике поиск по дереву должен правильно работать

Катч-теги
=========
(catch 'trap-errors (handler-bind ((error #'identity)) (break)))
в первом кадре стека дожен показываться catch tag.

Список ошибок компиляции
========================

    (clco::compile-file-for-tcl (merge-pathnames "test/error-browser-sample-file.lisp" clcon-server:*clcon-source-directory*) nil)

Соглашение об именах
====================
Функции для автоматизированного тестирования должны иметь префикс TestFnAuto
Если такая функция срабатывает без ошибки, значит тест прошёл. 
Функции ручного и полуручного тестирования должны иметь префикс TestFnMan и
содержать в комментариях руководство.


Тестирование закрытия сокета со стороны лиспа
===============

..::tkcon::EvalInSwankAsync "ewrw)" {} 0

Должна быть адекватная реакция клиента (какая - пока неведомо)


Тестирование eval-in-tcl
===============
Есть два режима - nowait и wait.
Что делать с nowait - не знаю.
Что делать с wait: выполнить с консоли:

(assert (equalp (clco::eval-in-tcl "expr 1" :nowait nil) "1"))



словарь отладочных сообщений
=================

Эти тексты нужно грепить по сорсам, чтобы включить/выключить putd для каких-то видов
сообщений. Стандарт будет состоять в том, чтобы к каждому сообщению прилагался код (добавить ещё один параметр в putd, чтобы это стало неизбежным?)

INVOKED_BTEXT_INSTANCE_CMD - полезно для отладки текста
444444 - полезно для отладки заморозки
buf1 - отключаем взаимодействие с лиспом всех буферов, кроме buf1
     - а также вывод команд btext тоже от этого зависит. 
217901 - ввод-вывод swank. 
567989 - EvalInTclSync 
454560000 - отслеживание сработавших биндингов для окна, нужно вызвать в явном виде,
632017 - отслеживание MaybeSendToLisp
 а потом фильтровать. См. ::gui_util::InstrumentAllBindingsWithPutd
 
