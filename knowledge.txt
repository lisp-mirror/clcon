; -*- Coding: utf-8 ; mode : lisp ; -*-
(in-package :swank)


Когда набиваем, консоль сразу пытается понять, что мы набиваем. И делает она это так:
bind TkConsolePost <KeyPress>
 -> ::tkcon::TagProc
   -> EvalAttached [list info proc]
      -> EvalInSwank 


Порядок инициализации
tkcon::AtSource 
  Init 
    InputUI 
      InitMenus 
      Bindings
    OuterAttachToSwank
   
::tkcon::MainInit - вызывается только в главном интерпрететаторе, не в рабах.

порядок вызова команды
  Eval - выполняет то, что ввёл пользователь
    CmdGet
    CmdSep - делим команду на несколько
    EvalCmd - выполняем одну команду


$PRIV(app) - канал связи
____________________________
SWANK: read-loop - читает сообщения из сокета.
   далее он отправляет их управляющему потоку (в почтовый ящик)


 dispatch-loop - пока не ясно, что делает, но ясно, что он достаёт сообщения из почтового ящика


 decode-message - читает сообщение из потока
   read-message - собственно читает
     read-packet - читает сначала длину сообщения, затем содержимое
     read-form - парсит сообщение


sudo rm -f /s2/tcpdump.log && sudo tcpdump -w /s2/tcpdump.log -i lo

(swank:create-server :port 4009 :dont-close t)

multithreaded-connection - здесь описаны треды


thread в сообщении swank - сначала это t
затем единица.
Разбор этого значения - в ф-ии swank::thread-for-evaluation


-- синхронное выполнение ---
Видимо, его не существует. Для него в slime ставится тред t и назначаются соответствующие продолжения.
slime-rex умеет назначать продолжения, emacs-rex из lime - не умеет.

slime-eval делает следующее:
1. Пополняет стек синхронных продолжений текущим тегом продолжения
2. Навешивает продолжение, см. ниже. 
3. Отправляет запрос.
4. Безконечно ждёт ответа
5. Продолжение смотрит, есть ли тег среди тегов синхронных продолжений
При этом обрабатываеются события :ok и :abort
5.1. Если есть, то бросает этот тег (throw)
5.2. А что же асинхронные события, к-рые в этот момент придут? видимо, они будут выполнены (slime-dispatch-event вызывается из slime-process-available-input
           Но нам не надо такого. Видимо, для этого нужно отличать синхронные от асинхроннных.


--- completion ---- 

::tkcon::Expand - completion
слово тип
ExpandProcname - добавляем ExpandLispSymbol
тогда вопрос - как добудем коннект из текст видгета?


-----------------------------------
swank::*emacs-connection* - текущее соединение с emacs. Ему шлёт сообщения ф-ия
(send-to-emacs)

Где оно связывается?

with-connection
dispatch-loop

Что мы делаем?

см. clco::tcl-connection-p , clco::set-tcl-connection-p

tkcon
-----------------------------------------------
Есть два режима - главного интерпретатора и рабов. Мы работаем в режиме главного интерпретатора, поскольку  у нас IDE для лиспа, а не для tcl. Если мы хотим несколько листенеров, нам придётся иметь дело с режимом рабов, но я не совсем понимаю, как он работает. 

Было бы желательно (хотя и не обязательно) восстановить возможность аттачей-детачей к разным интерпретатором. Или совсем её отрубить.

tkcon main
----------
proc tkcon - не находит не одного случая, превращает main в ::tkcon::Main и вызывает
а

proc ::tkcon::MainInit {}
  ...
  interp alias {} ::tkcon::Main {} ::tkcon::InterpEval MainMenuDup 
  

Пространство имен tkcon есть только в главном интерпретаторе.
Доступно через .tkcon main


Как хранить соединения?
-----------------------
генератор кодов использует глоб.перем в главном интерпретаторе
каждый объект соединения - это переменная с именем SwankConnection$SwankConnectionCounter,
содержит массив
очищается не знаю как - видимо, вручную?

Что содержится в соединении?
---------------------------
Сокет.
Состояние:
new - ничего
socket_only - открыт сокет
initialized - инициализирован (требуется консоль)
dead - умер
  


Именованные массивы
--------------------
а) http://wiki.tcl.tk/1032
    set name "SwankConnection234"
    variable $name
    array set $name [list a b]
    set ${name}(sock) 123123213213
    parray $name
    puts [set ${name}(sock)]
    puts "that's it"



б) Из clcon
    set name "SwankConnection333"
    variable $name
    upvar \#0 $name con
    array set $name [list a b]
    set con(sock) 123123213213
    puts $con(sock)
    puts "that's it"


Гиперссылки в тексте
------------------
Искать WriteActiveText во всех файлах *.tcl, *.l*sp 


Вставить текст в консоль:
-------------------------
.tkcon main .tab1 insert end "asdfasdf"

[::tkcon::UniqueTag .tab1]
.tkcon main {.tab1 insert end "asdfasdf" [list stderr _tag27]}
.tkcon main {.tab1 tag configure _tag27 -underline 1}

Возможно нужно делать disambiguation в списке исходников,
и указывать не на строчку, а на dspec, дающий уже уникальное место.
Тогда dspec-ы будут устойчивы к редактированию. 


В каких интерпретаторах работаем?
---------------------------------
Почти везде и раньше работали в главном, а теперь вообще в него переключились.
Также намекает то, что в рабском нет OPT и PRIV и вообще пр-ва ::tkcon 

---------------------------------
Блокировать ввод на время выполнения синхронного обмена. Всё плохо:
1. grab - нужно окно.
2. busy - можно указать часть окна, но нужно переставить фокус. Фокус будет мелькать.

Таким образом, нужно программирование. Вероятно, можно сделать text с блокировкой всех событий и временно её включать на момент синхронного обмена. http://lisper.ru/forum/thread/1221/page4#comment-11321


Раскраска в ABLE:
-----------------
able::get-current-token -> ltk::get-text-to-cursor - жрёт гигантский кусок текста от начала до текущей строчки. 
indent-current-line -> обращается к ltk:text - жрёт весь текст.


Ищем ctext.tcl
--------------
strace -xf -eopen -o out.log wish /s2/clcon/tk_samples/ctext-edit.tcl
cat out.log | grep ctext
/usr/share/tcltk/tklib0.6/ctext/ctext.tcl


-----------
grep *fast*


Отладка взаимодействия клиент-сервер в одуванчике-clcon_text
---------
(trace clco::eval-in-tcl odu::eval-text2odu-event)

Отладка соответствия между редактированием там и сям
---------
(trace clco::eval-in-tcl oi::insert-character oi::insert-string oi::insert-region oi::ninsert-region oi::delete-characters oi::delete-region oi::delete-and-save-region)

trasnpose-forms
beginning-of-defun
end-of-defun
forward-list
backward-list
forward-form
backward-form
mark-defun 
forward-up-list
backward-up-list
down-list
mark-containing-form odu - see oi::clcon_text-selection-coordinates docstring


Информация для переделки
-------
tty-input.lisp - ввод с клавиатуры - вроде несложно.
/s2/oduvanchik2/src/struct.lisp - родовые функции для работы с экраном
/s2/oduvanchik2/src/tty-screen.lisp - их методы

oi::init-tty-screen-manager - точка входа в него. 


Начинаем отлаживать невидимый одуванчик
-------
(trace clco::podsunutq-event clco::pop-text2odu-event-queue odu::eval-text2odu-event)


ГРЕП
---
Поиск в одуванчике:

grep -nH -e :mini `cat /s2/oduvanchik/odu-files.grep` 2> /dev/null
/s2/oduvanchik2/odugrep.sh :invisible

utf-8
-----
swank::asciify
swank/backend:utf8-to-string

sldb-break-with-default-debugger
-----
У меня не работает в обычном SLIME - нет смысла переносить. Работает только, если код запущен изначально в буфере *inferior-lisp*. вот как я пытался поправить, но не вышло ничего:

```(defun default-lisp-stream-bindings ()
  (let (result)
    (bt:join-thread
     (bt:make-thread
      (lambda ()
        (setf result
              (mapcar (lambda (name) (cons name (eval name)))
                      '(*standard-output* 
                        *standard-input*  
                        *trace-output*    
                        *error-output*    
                        *debug-io*        
                        *query-io*        
                        *terminal-io*))))
      :name "default-lisp-stream-bindings-enquiry-thread")
     )
    result))

 (swank::defslimefun swank::sldb-break-with-default-debugger (dont-unwind)
  "Invoke the default debugger."
  (setf dont-unwind t)
  (swank::with-bindings (default-lisp-stream-bindings)
    (cond (dont-unwind 
           (swank::invoke-default-debugger swank::*swank-debugger-condition*))
          (t
           (signal 'swank::invoke-default-debugger)))))
```



Трассирвока tcl
----------------
..proc trace_report {args} { putd "trace_report: $args"; dump_all_stack_putd }
..trace add execution ::edt::Bi2W leave trace_report


пытаемся сделать один trace-output на всё
-------------------------------------------
В .sbclrc
(defvar *initial-standard-output* *standard-output*)
; здесь где-то загружаем swank.
(defun redirect-trace-output-to-inferior-lisp (c)
  (setf (slot-value c 'swank::trace-output) *initial-standard-output*))
(push 'redirect-trace-output-to-inferior-lisp swank::*new-connection-hook*)


(format *trace-output* "~%insert-string b ~A" (oi::mark-row-and-col mark))
deal-with-highlight-after-insert-command


Заготовка для просмотровщика перекрёстных ссылок. Сейчас рано её делать, т.к.
виджеты списков не очень совершенны
tcl-ные процедуры для основы:
proc CompileAndLoadTheFile {clcon_text} {
proc FindSourceCommand {text} {
Виджет для основы: error-browser.erbr.tcl
Функция лиспа для основы: clco::compile-file-for-tcl


====================================================

MakeSwankConnection ->
(swank-io.tcl) ::tkcon::AttachSwank -> 
  PRIV(SwankReplReady) := 0   
  (swank-io.tcl) ::tkcon::SetupSwankConnection -> 
     (swank-io.tcl)proc ::tkcon::SwankRequestCreateRepl = на продолжении - SwankReplReady
     и затем читает ответ и продолжение вызывается
        (на продолжении) SwankReplReady PRIV(SwankReplReady) := 1


(:emacs-rex
 (swank:operate-on-system-for-emacs "ltk" 'load-op)
 "COMMON-LISP-USER" t 29)
